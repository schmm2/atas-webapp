{
  "_args": [
    [
      {
        "raw": "modules-loader@^0.1.0",
        "scope": null,
        "escapedName": "modules-loader",
        "name": "modules-loader",
        "rawSpec": "^0.1.0",
        "spec": ">=0.1.0 <0.2.0",
        "type": "range"
      },
      "/Users/martinschmidli/Documents/node/atas-webapp"
    ]
  ],
  "_from": "modules-loader@>=0.1.0 <0.2.0",
  "_id": "modules-loader@0.1.0",
  "_inCache": true,
  "_location": "/modules-loader",
  "_npmUser": {
    "name": "ralt",
    "email": "florian@margaine.com"
  },
  "_npmVersion": "1.1.59",
  "_phantomChildren": {},
  "_requested": {
    "raw": "modules-loader@^0.1.0",
    "scope": null,
    "escapedName": "modules-loader",
    "name": "modules-loader",
    "rawSpec": "^0.1.0",
    "spec": ">=0.1.0 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/modules-loader/-/modules-loader-0.1.0.tgz",
  "_shasum": "601724e6c56b48f314d6ec805d5ba8cc57a7eb90",
  "_shrinkwrap": null,
  "_spec": "modules-loader@^0.1.0",
  "_where": "/Users/martinschmidli/Documents/node/atas-webapp",
  "author": {
    "name": "Florian Margaine",
    "email": "florian@margaine.com",
    "url": "http://margaine.com"
  },
  "bugs": {
    "url": "https://github.com/Ralt/modules-loader/issues"
  },
  "dependencies": {},
  "description": "Loads module according to defined rules.",
  "devDependencies": {
    "grunt": "~0.3.15"
  },
  "directories": {},
  "dist": {
    "shasum": "601724e6c56b48f314d6ec805d5ba8cc57a7eb90",
    "tarball": "https://registry.npmjs.org/modules-loader/-/modules-loader-0.1.0.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/Ralt/modules-loader",
  "keywords": [],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Ralt/modules-loader/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/modules-loader",
  "maintainers": [
    {
      "name": "ralt",
      "email": "florian@margaine.com"
    }
  ],
  "name": "modules-loader",
  "optionalDependencies": {},
  "readme": "modules-loader\n===\n\nWhat it's for\n---\n\nLoads modules according to defined rules.\n\nUsage\n---\n\n    var loader = require( 'modules-loader' ),\n        path = require( 'path' );\n\n    loader.load( path.join( __dirname, 'foo', function( modules ) {\n        console.log( modules );\n    });\n\nDocumentation\n---\n\nThis modules provides the `load` method to load the modules, but also the\n`rules` object to define the rules.\n\n### Rules\n\nSome default rules already exist, you can find what they are with:\n\n    console.log( loader.rules );\n\n    {\n       'isJavascript': [Function],\n       'isNotGit': [Function],\n       'isNotNodeModule': [Function]\n    }\n\nThey're quite explicit :-). The first requires javascript files only, the\nsecond requires files that are *not* in `.git/` folders and the third requires\nfiles that are *not* in `node_modules/` folders.\n\nWriting such a rule is easy. Let's take a look at an example:\n\n    function isJavascript( files ) {\n        // The files argument is an array with the list of file paths.\n        // Absolute file paths.\n        return files.filter( function( file ) {\n\n            // Only return the files ending in .js\n            return file.slice( -3 ) === '.js';\n        });\n    }\n\nAdding your own rule is done this way:\n\n    var loader = require( 'modules-loader' );\n\n    loader.rules.isCustomRule = function( files ) {\n        // Your filtering code there.\n    };\n\nDeleting an existing rule can be done this way:\n\n    delete loader.rules.isJavascript;\n\n### The load method\n\nThe `load` method requires two arguments:\n\n1. The absolute path to the folder in which to load the modules.\n2. A callback.\n\nGetting the absolute path of a folder isn't so hard, here is an example:\n\n    var path = require( 'path' );\n\n    console.log( path.join( __dirname, 'foo' ) );\n\n    \"/absolute/path/to/foo\"\n\nThe callback gets the `modules` argument, an object with all the modules\nloaded.\n\nHere is an example with the following folder structure:\n\n    foo/\n        bar/\n            bar.js\n        baz/\n            baz.js\n        bar.js\n        baz.js\n\n    loader.load( folder, function( modules ) {\n        console.log( modules );\n    });\n\n    {\n        \"barBar.js\": [Object object],\n        \"bazBaz.js\": [Object object],\n        \"bar.js\": [Object object],\n        \"baz.js\": [Object object]\n    }\n\nSuch a naming convention is chosen for the following reasons:\n\n- To avoid names conflicts, the folder is added to the property name.\n- Because you might load non-js files, the extension is kept.\n\nContributors\n---\n\n- [Florian Margaine](http://margaine.com)\n\nLicense\n---\n\nMIT License.\n\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/Ralt/modules-loader.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.1.0"
}
